/* 二维数组中的查找
* 在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。
* 请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数
*/
public class Solution {
    public boolean Find(int target, int [][] array) {
        int rows = array.length;
        int columns = array[0].length;
        int i = rows-1;
        int j = 0;
        while(i>=0&&j<=columns-1)
        {
            if(target == array[i][j])
            {
                return true;
            }
            else if(target>array[i][j])
            {
                j++;
            }
            else
            {
                i--;
            }
        }
        return false;
    }
}


/*替换空格
* 请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。
*/
public class Solution {
    public String replaceSpace(StringBuffer str) {
    	int length = str.length();
        String newStr = "";
        for(int i = 0; i<length; i++)
        {
            if(str.charAt(i)==' ')
            {
                newStr+="%20";
            }
            else
            {
                newStr+=str.charAt(i);
            }
        }
        return newStr;
    }
}



/* 从尾到头打印链表
* 输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。
*/
import java.util.ArrayList;
public class Solution {
    public ArrayList<Integer> printListFromTailToHead(ListNode listNode) {
        ArrayList<Integer> inverse = new ArrayList<>();
        ArrayList<Integer> list = new ArrayList<>();
        if(listNode == null)
            return inverse;
        
        while(listNode!=null)
        {
            list.add(listNode.val);
            listNode = listNode.next;
        }
        int size = list.size();
        for(int i = size-1;i>=0;i--)
        {
            inverse.add(list.get(i));
        }
        return inverse;
    }
}



/* 旋转数组里的最小值
* 把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素。 
* 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。
*/
import java.util.ArrayList;
public class Solution {
    public int minNumberInRotateArray(int [] array) {
        int size = array.length;
        int min = 0;
        if(size == 0)
            return min;
        else if(size == 1)
            return array[0];
        
        int pre = array[size-1];
        for(int i = size-2; i>=0; i--)
        {
            int cur = array[i];
            if(cur > pre)
            {
                min = pre;
                break;
            }
            pre = cur;
        }
        return min;
    }
}



/* 斐波那契数列
* 大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。
* n<=39
*/
public class Solution {
    public int Fibonacci(int n){
        if(n==0) return 0;
        if(n==1) return 1;
        return (Fibonacci(n-2)+Fibonacci(n-1));
    }
}



/* 跳台阶
* 一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。
*/
public class Solution {
    public int JumpFloor(int target) {
        if(target == 0) return 0;
        if(target == 1) return 1;
        if(target == 2) return 2;
        return (JumpFloor(target-2)+JumpFloor(target-1));
    }
}



/* 变态跳台阶
* 一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。
*/
public class Solution {
    public int JumpFloorII(int target) {
        if(target == 0) return 0;
        if(target == 1) return 1;
        int num = 1; 
        for(int i = 1; i<target; i++)
        {
            num += JumpFloorII(i);
        }
        return num;
    }
}



/* 二叉树的镜像
* 操作给定的二叉树，将其变换为源二叉树的镜像。
*/
/**
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
public class Solution {
    public void Mirror(TreeNode root) {
        if(root==null)
        {
            return;
        }
        TreeNode temp = root.left;
        root.left = root.right;
        root.right = temp;
        Mirror(root.left);
        Mirror(root.right);
    }
}

/*
* 我们可以用2*1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2*1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？
*/
public class Solution {
    public int RectCover(int target) {
        if(target<=0){
            return 0;
        }
        else if(target==1){
            return 1;
        }
        else if(target==2){
            return 2;
        }
        else{
            return RectCover(target-1)+RectCover(target-2);
        }
    }
}
